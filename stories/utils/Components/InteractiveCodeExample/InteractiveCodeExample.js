import React, {cloneElement, Component, PropTypes, Children} from 'react';

import CodeBlock from '../CodeBlock';

import styles from './InteractiveCodeExample.scss';

export default class InteractiveCodeExample extends Component {

  static propTypes = {
    children: PropTypes.node,
    title: PropTypes.string
  };

  constructor(props) {
    super(props);

    this.state = {
      code: '',
    };

    this.onCodeChange = this.onCodeChange.bind(this);
  }

  onCodeChange(code) {
    if (code !== this.state.code) {
      this.setState({code});
    }
  }

  render() {
    const childrenWithOnChange = Children.map(this.props.children,
      child => cloneElement(child, {onChange: this.onCodeChange})
    );

    return (
      <div className={styles.example}>
        <div className={styles.input}>
          <h3>Options</h3>
          {childrenWithOnChange}
        </div>
        <div className={styles.output}>
          <h3>Autogenerated code</h3>
          <CodeBlock source={this.state.code} type="django"/>
        </div>
      </div>
    );
  }

}
